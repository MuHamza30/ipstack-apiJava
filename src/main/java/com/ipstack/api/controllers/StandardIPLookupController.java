/*
 * IPstackAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.ipstack.api.controllers;

import com.ipstack.api.ApiHelper;
import com.ipstack.api.Server;
import com.ipstack.api.exceptions.ApiException;
import com.ipstack.api.exceptions.ErrorException;
import com.ipstack.api.http.request.HttpMethod;
import com.ipstack.api.models.HostnameEnum;
import com.ipstack.api.models.IPLocation;
import com.ipstack.api.models.Language1Enum;
import com.ipstack.api.models.OutputEnum;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class StandardIPLookupController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public StandardIPLookupController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * This is the prime endpoint of IPstack API and used to look up single IPv4 or IPv6 addresses.
     * To call this endpoint, simply attach any IPv4 or IPv6 address to the API's base URL.
     * @param  ip  Required parameter: The IP address to lookup (IPv4 or IPv6)
     * @param  accessKey  Required parameter: Your API access key
     * @param  hostname  Optional parameter: Set to 1 to see the Hostname
     * @param  callback  Optional parameter: Response will be wrapped inside this function name
     *         (JSONP)
     * @param  language  Optional parameter: Set to a 2-letter language code to change output
     *         language. Supported languages: en (English/US), de (German), es (Spanish), fr
     *         (French), ja (Japanese), pt-br (Portuguese Brazil), ru (Russian), zh (Chinese)
     * @param  fields  Optional parameter: Set to your preferred output field(s)
     * @param  output  Optional parameter: Set to json or xml to choose between output formats
     * @return    Returns the IPLocation response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public IPLocation getStandardIPLookup(
            final String ip,
            final String accessKey,
            final HostnameEnum hostname,
            final String callback,
            final Language1Enum language,
            final String fields,
            final OutputEnum output) throws ApiException, IOException {
        return prepareGetStandardIPLookupRequest(ip, accessKey, hostname, callback, language,
                fields, output).execute();
    }

    /**
     * This is the prime endpoint of IPstack API and used to look up single IPv4 or IPv6 addresses.
     * To call this endpoint, simply attach any IPv4 or IPv6 address to the API's base URL.
     * @param  ip  Required parameter: The IP address to lookup (IPv4 or IPv6)
     * @param  accessKey  Required parameter: Your API access key
     * @param  hostname  Optional parameter: Set to 1 to see the Hostname
     * @param  callback  Optional parameter: Response will be wrapped inside this function name
     *         (JSONP)
     * @param  language  Optional parameter: Set to a 2-letter language code to change output
     *         language. Supported languages: en (English/US), de (German), es (Spanish), fr
     *         (French), ja (Japanese), pt-br (Portuguese Brazil), ru (Russian), zh (Chinese)
     * @param  fields  Optional parameter: Set to your preferred output field(s)
     * @param  output  Optional parameter: Set to json or xml to choose between output formats
     * @return    Returns the IPLocation response from the API call
     */
    public CompletableFuture<IPLocation> getStandardIPLookupAsync(
            final String ip,
            final String accessKey,
            final HostnameEnum hostname,
            final String callback,
            final Language1Enum language,
            final String fields,
            final OutputEnum output) {
        try {
            return prepareGetStandardIPLookupRequest(ip, accessKey, hostname, callback, language, fields,
            output).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for getStandardIPLookup.
     */
    private ApiCall<IPLocation, ApiException> prepareGetStandardIPLookupRequest(
            final String ip,
            final String accessKey,
            final HostnameEnum hostname,
            final String callback,
            final Language1Enum language,
            final String fields,
            final OutputEnum output) {
        return new ApiCall.Builder<IPLocation, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/{ip}")
                        .queryParam(param -> param.key("access_key")
                                .value(accessKey))
                        .queryParam(param -> param.key("hostname")
                                .value((hostname != null) ? hostname.value() : null).isRequired(false))
                        .queryParam(param -> param.key("callback")
                                .value(callback).isRequired(false))
                        .queryParam(param -> param.key("language")
                                .value((language != null) ? language.value() : null).isRequired(false))
                        .queryParam(param -> param.key("fields")
                                .value(fields).isRequired(false))
                        .queryParam(param -> param.key("output")
                                .value((output != null) ? output.value() : null).isRequired(false))
                        .templateParam(param -> param.key("ip").value(ip)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("apiKeyAuth"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, IPLocation.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request",
                                (reason, context) -> new ErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized - Invalid API key",
                                (reason, context) -> new ErrorException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Too many requests",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal server error",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}