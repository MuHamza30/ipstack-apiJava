/*
 * IPstackAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.ipstack.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for IPLocation type.
 */
public class IPLocation {
    private String ip;
    private String type;
    private String continentCode;
    private String continentName;
    private String countryCode;
    private String countryName;
    private String regionCode;
    private String regionName;
    private String city;
    private String zip;
    private Double latitude;
    private Double longitude;
    private Location location;
    private TimeZone timeZone;
    private Currency currency;
    private Connection connection;
    private String hostname;

    /**
     * Default constructor.
     */
    public IPLocation() {
    }

    /**
     * Initialization constructor.
     * @param  ip  String value for ip.
     * @param  type  String value for type.
     * @param  continentCode  String value for continentCode.
     * @param  continentName  String value for continentName.
     * @param  countryCode  String value for countryCode.
     * @param  countryName  String value for countryName.
     * @param  regionCode  String value for regionCode.
     * @param  regionName  String value for regionName.
     * @param  city  String value for city.
     * @param  zip  String value for zip.
     * @param  latitude  Double value for latitude.
     * @param  longitude  Double value for longitude.
     * @param  location  Location value for location.
     * @param  timeZone  TimeZone value for timeZone.
     * @param  currency  Currency value for currency.
     * @param  connection  Connection value for connection.
     * @param  hostname  String value for hostname.
     */
    public IPLocation(
            String ip,
            String type,
            String continentCode,
            String continentName,
            String countryCode,
            String countryName,
            String regionCode,
            String regionName,
            String city,
            String zip,
            Double latitude,
            Double longitude,
            Location location,
            TimeZone timeZone,
            Currency currency,
            Connection connection,
            String hostname) {
        this.ip = ip;
        this.type = type;
        this.continentCode = continentCode;
        this.continentName = continentName;
        this.countryCode = countryCode;
        this.countryName = countryName;
        this.regionCode = regionCode;
        this.regionName = regionName;
        this.city = city;
        this.zip = zip;
        this.latitude = latitude;
        this.longitude = longitude;
        this.location = location;
        this.timeZone = timeZone;
        this.currency = currency;
        this.connection = connection;
        this.hostname = hostname;
    }

    /**
     * Getter for Ip.
     * The IP address
     * @return Returns the String
     */
    @JsonGetter("ip")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getIp() {
        return ip;
    }

    /**
     * Setter for Ip.
     * The IP address
     * @param ip Value for String
     */
    @JsonSetter("ip")
    public void setIp(String ip) {
        this.ip = ip;
    }

    /**
     * Getter for Type.
     * The type of IP address (ipv4 or ipv6)
     * @return Returns the String
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * The type of IP address (ipv4 or ipv6)
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for ContinentCode.
     * The continent code
     * @return Returns the String
     */
    @JsonGetter("continent_code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getContinentCode() {
        return continentCode;
    }

    /**
     * Setter for ContinentCode.
     * The continent code
     * @param continentCode Value for String
     */
    @JsonSetter("continent_code")
    public void setContinentCode(String continentCode) {
        this.continentCode = continentCode;
    }

    /**
     * Getter for ContinentName.
     * The continent name
     * @return Returns the String
     */
    @JsonGetter("continent_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getContinentName() {
        return continentName;
    }

    /**
     * Setter for ContinentName.
     * The continent name
     * @param continentName Value for String
     */
    @JsonSetter("continent_name")
    public void setContinentName(String continentName) {
        this.continentName = continentName;
    }

    /**
     * Getter for CountryCode.
     * The country code
     * @return Returns the String
     */
    @JsonGetter("country_code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCountryCode() {
        return countryCode;
    }

    /**
     * Setter for CountryCode.
     * The country code
     * @param countryCode Value for String
     */
    @JsonSetter("country_code")
    public void setCountryCode(String countryCode) {
        this.countryCode = countryCode;
    }

    /**
     * Getter for CountryName.
     * The country name
     * @return Returns the String
     */
    @JsonGetter("country_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCountryName() {
        return countryName;
    }

    /**
     * Setter for CountryName.
     * The country name
     * @param countryName Value for String
     */
    @JsonSetter("country_name")
    public void setCountryName(String countryName) {
        this.countryName = countryName;
    }

    /**
     * Getter for RegionCode.
     * The region code
     * @return Returns the String
     */
    @JsonGetter("region_code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getRegionCode() {
        return regionCode;
    }

    /**
     * Setter for RegionCode.
     * The region code
     * @param regionCode Value for String
     */
    @JsonSetter("region_code")
    public void setRegionCode(String regionCode) {
        this.regionCode = regionCode;
    }

    /**
     * Getter for RegionName.
     * The region name
     * @return Returns the String
     */
    @JsonGetter("region_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getRegionName() {
        return regionName;
    }

    /**
     * Setter for RegionName.
     * The region name
     * @param regionName Value for String
     */
    @JsonSetter("region_name")
    public void setRegionName(String regionName) {
        this.regionName = regionName;
    }

    /**
     * Getter for City.
     * The city name
     * @return Returns the String
     */
    @JsonGetter("city")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCity() {
        return city;
    }

    /**
     * Setter for City.
     * The city name
     * @param city Value for String
     */
    @JsonSetter("city")
    public void setCity(String city) {
        this.city = city;
    }

    /**
     * Getter for Zip.
     * The ZIP code
     * @return Returns the String
     */
    @JsonGetter("zip")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getZip() {
        return zip;
    }

    /**
     * Setter for Zip.
     * The ZIP code
     * @param zip Value for String
     */
    @JsonSetter("zip")
    public void setZip(String zip) {
        this.zip = zip;
    }

    /**
     * Getter for Latitude.
     * The latitude
     * @return Returns the Double
     */
    @JsonGetter("latitude")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getLatitude() {
        return latitude;
    }

    /**
     * Setter for Latitude.
     * The latitude
     * @param latitude Value for Double
     */
    @JsonSetter("latitude")
    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    /**
     * Getter for Longitude.
     * The longitude
     * @return Returns the Double
     */
    @JsonGetter("longitude")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getLongitude() {
        return longitude;
    }

    /**
     * Setter for Longitude.
     * The longitude
     * @param longitude Value for Double
     */
    @JsonSetter("longitude")
    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    /**
     * Getter for Location.
     * @return Returns the Location
     */
    @JsonGetter("location")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Location getLocation() {
        return location;
    }

    /**
     * Setter for Location.
     * @param location Value for Location
     */
    @JsonSetter("location")
    public void setLocation(Location location) {
        this.location = location;
    }

    /**
     * Getter for TimeZone.
     * @return Returns the TimeZone
     */
    @JsonGetter("time_zone")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TimeZone getTimeZone() {
        return timeZone;
    }

    /**
     * Setter for TimeZone.
     * @param timeZone Value for TimeZone
     */
    @JsonSetter("time_zone")
    public void setTimeZone(TimeZone timeZone) {
        this.timeZone = timeZone;
    }

    /**
     * Getter for Currency.
     * @return Returns the Currency
     */
    @JsonGetter("currency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Currency getCurrency() {
        return currency;
    }

    /**
     * Setter for Currency.
     * @param currency Value for Currency
     */
    @JsonSetter("currency")
    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    /**
     * Getter for Connection.
     * @return Returns the Connection
     */
    @JsonGetter("connection")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Connection getConnection() {
        return connection;
    }

    /**
     * Setter for Connection.
     * @param connection Value for Connection
     */
    @JsonSetter("connection")
    public void setConnection(Connection connection) {
        this.connection = connection;
    }

    /**
     * Getter for Hostname.
     * The hostname (when hostname=1 parameter is used)
     * @return Returns the String
     */
    @JsonGetter("hostname")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHostname() {
        return hostname;
    }

    /**
     * Setter for Hostname.
     * The hostname (when hostname=1 parameter is used)
     * @param hostname Value for String
     */
    @JsonSetter("hostname")
    public void setHostname(String hostname) {
        this.hostname = hostname;
    }

    /**
     * Converts this IPLocation into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "IPLocation [" + "ip=" + ip + ", type=" + type + ", continentCode=" + continentCode
                + ", continentName=" + continentName + ", countryCode=" + countryCode
                + ", countryName=" + countryName + ", regionCode=" + regionCode + ", regionName="
                + regionName + ", city=" + city + ", zip=" + zip + ", latitude=" + latitude
                + ", longitude=" + longitude + ", location=" + location + ", timeZone=" + timeZone
                + ", currency=" + currency + ", connection=" + connection + ", hostname=" + hostname
                + "]";
    }

    /**
     * Builds a new {@link IPLocation.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link IPLocation.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .ip(getIp())
                .type(getType())
                .continentCode(getContinentCode())
                .continentName(getContinentName())
                .countryCode(getCountryCode())
                .countryName(getCountryName())
                .regionCode(getRegionCode())
                .regionName(getRegionName())
                .city(getCity())
                .zip(getZip())
                .latitude(getLatitude())
                .longitude(getLongitude())
                .location(getLocation())
                .timeZone(getTimeZone())
                .currency(getCurrency())
                .connection(getConnection())
                .hostname(getHostname());
        return builder;
    }

    /**
     * Class to build instances of {@link IPLocation}.
     */
    public static class Builder {
        private String ip;
        private String type;
        private String continentCode;
        private String continentName;
        private String countryCode;
        private String countryName;
        private String regionCode;
        private String regionName;
        private String city;
        private String zip;
        private Double latitude;
        private Double longitude;
        private Location location;
        private TimeZone timeZone;
        private Currency currency;
        private Connection connection;
        private String hostname;



        /**
         * Setter for ip.
         * @param  ip  String value for ip.
         * @return Builder
         */
        public Builder ip(String ip) {
            this.ip = ip;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for continentCode.
         * @param  continentCode  String value for continentCode.
         * @return Builder
         */
        public Builder continentCode(String continentCode) {
            this.continentCode = continentCode;
            return this;
        }

        /**
         * Setter for continentName.
         * @param  continentName  String value for continentName.
         * @return Builder
         */
        public Builder continentName(String continentName) {
            this.continentName = continentName;
            return this;
        }

        /**
         * Setter for countryCode.
         * @param  countryCode  String value for countryCode.
         * @return Builder
         */
        public Builder countryCode(String countryCode) {
            this.countryCode = countryCode;
            return this;
        }

        /**
         * Setter for countryName.
         * @param  countryName  String value for countryName.
         * @return Builder
         */
        public Builder countryName(String countryName) {
            this.countryName = countryName;
            return this;
        }

        /**
         * Setter for regionCode.
         * @param  regionCode  String value for regionCode.
         * @return Builder
         */
        public Builder regionCode(String regionCode) {
            this.regionCode = regionCode;
            return this;
        }

        /**
         * Setter for regionName.
         * @param  regionName  String value for regionName.
         * @return Builder
         */
        public Builder regionName(String regionName) {
            this.regionName = regionName;
            return this;
        }

        /**
         * Setter for city.
         * @param  city  String value for city.
         * @return Builder
         */
        public Builder city(String city) {
            this.city = city;
            return this;
        }

        /**
         * Setter for zip.
         * @param  zip  String value for zip.
         * @return Builder
         */
        public Builder zip(String zip) {
            this.zip = zip;
            return this;
        }

        /**
         * Setter for latitude.
         * @param  latitude  Double value for latitude.
         * @return Builder
         */
        public Builder latitude(Double latitude) {
            this.latitude = latitude;
            return this;
        }

        /**
         * Setter for longitude.
         * @param  longitude  Double value for longitude.
         * @return Builder
         */
        public Builder longitude(Double longitude) {
            this.longitude = longitude;
            return this;
        }

        /**
         * Setter for location.
         * @param  location  Location value for location.
         * @return Builder
         */
        public Builder location(Location location) {
            this.location = location;
            return this;
        }

        /**
         * Setter for timeZone.
         * @param  timeZone  TimeZone value for timeZone.
         * @return Builder
         */
        public Builder timeZone(TimeZone timeZone) {
            this.timeZone = timeZone;
            return this;
        }

        /**
         * Setter for currency.
         * @param  currency  Currency value for currency.
         * @return Builder
         */
        public Builder currency(Currency currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Setter for connection.
         * @param  connection  Connection value for connection.
         * @return Builder
         */
        public Builder connection(Connection connection) {
            this.connection = connection;
            return this;
        }

        /**
         * Setter for hostname.
         * @param  hostname  String value for hostname.
         * @return Builder
         */
        public Builder hostname(String hostname) {
            this.hostname = hostname;
            return this;
        }

        /**
         * Builds a new {@link IPLocation} object using the set fields.
         * @return {@link IPLocation}
         */
        public IPLocation build() {
            return new IPLocation(ip, type, continentCode, continentName, countryCode, countryName,
                    regionCode, regionName, city, zip, latitude, longitude, location, timeZone,
                    currency, connection, hostname);
        }
    }
}
