/*
 * IPstackAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.ipstack.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for Language type.
 */
public class Language {
    private String code;
    private String name;
    private String mNative;

    /**
     * Default constructor.
     */
    public Language() {
    }

    /**
     * Initialization constructor.
     * @param  code  String value for code.
     * @param  name  String value for name.
     * @param  mNative  String value for mNative.
     */
    public Language(
            String code,
            String name,
            String mNative) {
        this.code = code;
        this.name = name;
        this.mNative = mNative;
    }

    /**
     * Getter for Code.
     * @return Returns the String
     */
    @JsonGetter("code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCode() {
        return code;
    }

    /**
     * Setter for Code.
     * @param code Value for String
     */
    @JsonSetter("code")
    public void setCode(String code) {
        this.code = code;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Native.
     * @return Returns the String
     */
    @JsonGetter("native")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNative() {
        return mNative;
    }

    /**
     * Setter for Native.
     * @param mNative Value for String
     */
    @JsonSetter("native")
    public void setNative(String mNative) {
        this.mNative = mNative;
    }

    /**
     * Converts this Language into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Language [" + "code=" + code + ", name=" + name + ", mNative=" + mNative + "]";
    }

    /**
     * Builds a new {@link Language.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Language.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .code(getCode())
                .name(getName())
                .mNative(getNative());
        return builder;
    }

    /**
     * Class to build instances of {@link Language}.
     */
    public static class Builder {
        private String code;
        private String name;
        private String mNative;



        /**
         * Setter for code.
         * @param  code  String value for code.
         * @return Builder
         */
        public Builder code(String code) {
            this.code = code;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for mNative.
         * @param  mNative  String value for mNative.
         * @return Builder
         */
        public Builder mNative(String mNative) {
            this.mNative = mNative;
            return this;
        }

        /**
         * Builds a new {@link Language} object using the set fields.
         * @return {@link Language}
         */
        public Language build() {
            return new Language(code, name, mNative);
        }
    }
}
