/*
 * IPstackAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.ipstack.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for Location type.
 */
public class Location {
    private Integer geonameId;
    private String capital;
    private List<Language> languages;
    private String countryFlag;
    private String countryFlagEmoji;
    private String countryFlagEmojiUnicode;
    private String callingCode;
    private Boolean isEu;

    /**
     * Default constructor.
     */
    public Location() {
    }

    /**
     * Initialization constructor.
     * @param  geonameId  Integer value for geonameId.
     * @param  capital  String value for capital.
     * @param  languages  List of Language value for languages.
     * @param  countryFlag  String value for countryFlag.
     * @param  countryFlagEmoji  String value for countryFlagEmoji.
     * @param  countryFlagEmojiUnicode  String value for countryFlagEmojiUnicode.
     * @param  callingCode  String value for callingCode.
     * @param  isEu  Boolean value for isEu.
     */
    public Location(
            Integer geonameId,
            String capital,
            List<Language> languages,
            String countryFlag,
            String countryFlagEmoji,
            String countryFlagEmojiUnicode,
            String callingCode,
            Boolean isEu) {
        this.geonameId = geonameId;
        this.capital = capital;
        this.languages = languages;
        this.countryFlag = countryFlag;
        this.countryFlagEmoji = countryFlagEmoji;
        this.countryFlagEmojiUnicode = countryFlagEmojiUnicode;
        this.callingCode = callingCode;
        this.isEu = isEu;
    }

    /**
     * Getter for GeonameId.
     * The geoname ID
     * @return Returns the Integer
     */
    @JsonGetter("geoname_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getGeonameId() {
        return geonameId;
    }

    /**
     * Setter for GeonameId.
     * The geoname ID
     * @param geonameId Value for Integer
     */
    @JsonSetter("geoname_id")
    public void setGeonameId(Integer geonameId) {
        this.geonameId = geonameId;
    }

    /**
     * Getter for Capital.
     * The capital city
     * @return Returns the String
     */
    @JsonGetter("capital")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCapital() {
        return capital;
    }

    /**
     * Setter for Capital.
     * The capital city
     * @param capital Value for String
     */
    @JsonSetter("capital")
    public void setCapital(String capital) {
        this.capital = capital;
    }

    /**
     * Getter for Languages.
     * @return Returns the List of Language
     */
    @JsonGetter("languages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Language> getLanguages() {
        return languages;
    }

    /**
     * Setter for Languages.
     * @param languages Value for List of Language
     */
    @JsonSetter("languages")
    public void setLanguages(List<Language> languages) {
        this.languages = languages;
    }

    /**
     * Getter for CountryFlag.
     * URL to the country flag
     * @return Returns the String
     */
    @JsonGetter("country_flag")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCountryFlag() {
        return countryFlag;
    }

    /**
     * Setter for CountryFlag.
     * URL to the country flag
     * @param countryFlag Value for String
     */
    @JsonSetter("country_flag")
    public void setCountryFlag(String countryFlag) {
        this.countryFlag = countryFlag;
    }

    /**
     * Getter for CountryFlagEmoji.
     * The country flag emoji
     * @return Returns the String
     */
    @JsonGetter("country_flag_emoji")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCountryFlagEmoji() {
        return countryFlagEmoji;
    }

    /**
     * Setter for CountryFlagEmoji.
     * The country flag emoji
     * @param countryFlagEmoji Value for String
     */
    @JsonSetter("country_flag_emoji")
    public void setCountryFlagEmoji(String countryFlagEmoji) {
        this.countryFlagEmoji = countryFlagEmoji;
    }

    /**
     * Getter for CountryFlagEmojiUnicode.
     * The country flag emoji unicode
     * @return Returns the String
     */
    @JsonGetter("country_flag_emoji_unicode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCountryFlagEmojiUnicode() {
        return countryFlagEmojiUnicode;
    }

    /**
     * Setter for CountryFlagEmojiUnicode.
     * The country flag emoji unicode
     * @param countryFlagEmojiUnicode Value for String
     */
    @JsonSetter("country_flag_emoji_unicode")
    public void setCountryFlagEmojiUnicode(String countryFlagEmojiUnicode) {
        this.countryFlagEmojiUnicode = countryFlagEmojiUnicode;
    }

    /**
     * Getter for CallingCode.
     * The calling code
     * @return Returns the String
     */
    @JsonGetter("calling_code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCallingCode() {
        return callingCode;
    }

    /**
     * Setter for CallingCode.
     * The calling code
     * @param callingCode Value for String
     */
    @JsonSetter("calling_code")
    public void setCallingCode(String callingCode) {
        this.callingCode = callingCode;
    }

    /**
     * Getter for IsEu.
     * Whether the country is in the EU
     * @return Returns the Boolean
     */
    @JsonGetter("is_eu")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsEu() {
        return isEu;
    }

    /**
     * Setter for IsEu.
     * Whether the country is in the EU
     * @param isEu Value for Boolean
     */
    @JsonSetter("is_eu")
    public void setIsEu(Boolean isEu) {
        this.isEu = isEu;
    }

    /**
     * Converts this Location into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Location [" + "geonameId=" + geonameId + ", capital=" + capital + ", languages="
                + languages + ", countryFlag=" + countryFlag + ", countryFlagEmoji="
                + countryFlagEmoji + ", countryFlagEmojiUnicode=" + countryFlagEmojiUnicode
                + ", callingCode=" + callingCode + ", isEu=" + isEu + "]";
    }

    /**
     * Builds a new {@link Location.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Location.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .geonameId(getGeonameId())
                .capital(getCapital())
                .languages(getLanguages())
                .countryFlag(getCountryFlag())
                .countryFlagEmoji(getCountryFlagEmoji())
                .countryFlagEmojiUnicode(getCountryFlagEmojiUnicode())
                .callingCode(getCallingCode())
                .isEu(getIsEu());
        return builder;
    }

    /**
     * Class to build instances of {@link Location}.
     */
    public static class Builder {
        private Integer geonameId;
        private String capital;
        private List<Language> languages;
        private String countryFlag;
        private String countryFlagEmoji;
        private String countryFlagEmojiUnicode;
        private String callingCode;
        private Boolean isEu;



        /**
         * Setter for geonameId.
         * @param  geonameId  Integer value for geonameId.
         * @return Builder
         */
        public Builder geonameId(Integer geonameId) {
            this.geonameId = geonameId;
            return this;
        }

        /**
         * Setter for capital.
         * @param  capital  String value for capital.
         * @return Builder
         */
        public Builder capital(String capital) {
            this.capital = capital;
            return this;
        }

        /**
         * Setter for languages.
         * @param  languages  List of Language value for languages.
         * @return Builder
         */
        public Builder languages(List<Language> languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Setter for countryFlag.
         * @param  countryFlag  String value for countryFlag.
         * @return Builder
         */
        public Builder countryFlag(String countryFlag) {
            this.countryFlag = countryFlag;
            return this;
        }

        /**
         * Setter for countryFlagEmoji.
         * @param  countryFlagEmoji  String value for countryFlagEmoji.
         * @return Builder
         */
        public Builder countryFlagEmoji(String countryFlagEmoji) {
            this.countryFlagEmoji = countryFlagEmoji;
            return this;
        }

        /**
         * Setter for countryFlagEmojiUnicode.
         * @param  countryFlagEmojiUnicode  String value for countryFlagEmojiUnicode.
         * @return Builder
         */
        public Builder countryFlagEmojiUnicode(String countryFlagEmojiUnicode) {
            this.countryFlagEmojiUnicode = countryFlagEmojiUnicode;
            return this;
        }

        /**
         * Setter for callingCode.
         * @param  callingCode  String value for callingCode.
         * @return Builder
         */
        public Builder callingCode(String callingCode) {
            this.callingCode = callingCode;
            return this;
        }

        /**
         * Setter for isEu.
         * @param  isEu  Boolean value for isEu.
         * @return Builder
         */
        public Builder isEu(Boolean isEu) {
            this.isEu = isEu;
            return this;
        }

        /**
         * Builds a new {@link Location} object using the set fields.
         * @return {@link Location}
         */
        public Location build() {
            return new Location(geonameId, capital, languages, countryFlag, countryFlagEmoji,
                    countryFlagEmojiUnicode, callingCode, isEu);
        }
    }
}
